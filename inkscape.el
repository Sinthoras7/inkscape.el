;;; inkscape.el --- compfortably launch inkscape from emacs -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2020 Yoav Marco
;;
;; Author: Yoav Marco <http://github/yoavm448>
;; Maintainer: Yoav Marco <yoavm448@gmail.com>
;; Created: August 19, 2020
;; Modified: August 19, 2020
;; Version: 0.0.1
;; Keywords:
;; Homepage: https://github.com/yoavm448/inkscape
;; Package-Requires: ((emacs 28.0.50) (cl-lib "0.5") (async "1.0"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;  compfortably launch inkscape from emacs
;;
;;; Code:
(require 'async)

(defcustom inkscape-fig-dir "./figures/"
  "Directory to keep (svg|pdf|pdf_tex) figures generated by inkscape."
  :type 'string)

(defcustom inkscape-output-format "pdf_tex"
  "What extension the svg exported by inkscape should have."
  :type 'string)

(defcustom inkscape-compilation-args '("--export-type=pdf" "--export-latex")
  "Arguments to give inkscape when compiling an inkscape SVG."
  :type 'string)

(defcustom inkscape-include-string
  (concat "\\inklude{0.7\\textwidth}{%s." inkscape-output-format "}")
  "String to be added to the `kill-ring' at the end of a successful `inkscape' invocation.
%s is used as a placeholder for a figure name a (path with no extension)."
  :type 'string)

(defcustom inkscape-plain-svg-template
  (with-temp-buffer
    (insert-file-contents-literally "./template.svg")
    (buffer-substring-no-properties (point-min) (point-max)))
  "Template svg to start editing from."
  :type 'string)

(defmacro inkscape--async-start-process-let (bindings &rest forms)
  "A let-like macro allowing to launch subprocesses asynchronically.

See `inkscape-new-fig' for a glimpse of what this does."
  (declare (indent 1))
  (if (null bindings)
      `(progn ,@forms)
    ;; (message ": %s" (car (cdar bindings)))
    (if (eq (car-safe (car (cdr (car bindings)))) 'process)
        (cl-destructuring-bind (_process name program args)
            (cadar bindings)
          `(apply #'async-start-process ,name ,program
                  (lambda (,(caar bindings))
                    (inkscape--async-start-process-let
                        ,(cdr bindings) ,@forms))
                  ,args))
      `(let (,(car bindings))
         (inkscape--async-start-process-let
             ,(cdr bindings) ,@forms)))))


;;;###autoload
(defun inkscape (fig-name)
  "Edit or create a new figure named FIG-NAME.

A new figure starts with template `inkscape-plain-svg-template'
and is put in `inkscape-fig-dir'. When editing in an Inkscape
subprocess is done, the SVG is compiled to
`inkscape-output-format' via `inkscape-compilation-args'."
  (interactive (list (completing-read
                      "Figure file name (no extension): "
                      (mapcar #'file-name-sans-extension
                              (nconc (file-expand-wildcards (concat inkscape-fig-dir "*.pdf"))
                                     (file-expand-wildcards (concat inkscape-fig-dir "*.svg"))))
                      nil nil inkscape-fig-dir)))
  (let ((output-svg (concat fig-name "." "svg"))
        (output-to-include (concat fig-name "." inkscape-output-format)))
    (unless (file-exists-p output-svg)
      (write-region inkscape-plain-svg-template nil output-svg nil 0))
    (inkscape--async-start-process-let
        ((_edit-process (process "inkscape-editing"
                                 "inkscape" (list output-svg)))
         (comp-process (process "inkscape-compile"
                                "inkscape" (cons output-svg inkscape-compilation-args)))
         (_
          (unless (file-exists-p output-to-include)
            (error "%s failed to produce. See %s for more details"
                   output-to-include (process-buffer comp-process)))))
      (kill-new (format inkscape-include-string fig-name))
      (message "Copied include string"))))

(provide 'inkscape)
;;; inkscape.el ends here
